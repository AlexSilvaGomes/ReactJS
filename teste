AWSTemplateFormatVersion: "2010-09-09"
Description: ''

Parameters: 
  
  PKElementName:
    Description: 'nome do campo PrimaryKey'
    Type: 'String'
    AllowedPattern: '[a-zA-Z0-9]*'
    MinLength: '1'
    MaxLength: '2048'
    ConstraintDescription: 'apenas caracteres alfanumericos são permitidos'


  TSElementName:
    Description: 'nome do campo timestamp'
    Type: 'String'
    AllowedPattern: '[a-zA-Z0-9]*'
    MinLength: '1'
    MaxLength: '2048'
    ConstraintDescription: 'apenas caracteres alfanumericos são permitidos'


Resources:

  DynamoDBTableTTL:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: !Ref PKElementName
          AttributeType: 'S'
      KeySchema:
        -
          AttributeName: !Ref PKElementName
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 10
      TimeToLiveSpecification:
        AttributeName: !Ref TSElementName
        Enabled: true
      StreamSpecification: 
        StreamViewType: NEW_AND_OLD_IMAGES


  MyFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - 
          arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole

  LambdaFunctionTrigger:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt MyFunctionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event, context) =>{
            for(const record of event.Records){
              console.log(`${record.eventName} - ${record.eventID} : DynamoDB Record:%j` , record.dynamodb)
            }
            return `Successfully processed ${event.Records.length} records.`;
          }
      Description: Função para recuperar eventos do dynamo e logar no cloudwatch
      TracingConfig:
        Mode: Active



  #Cria a trigger do DynamoDB acionando a lambda
  DataTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: #trigger para  eventos da tabela Dynamo
        Fn::GetAtt: [ DynamoDBTableTTL, StreamArn ]
      FunctionName: #Função  lambda ao ser invocada
        Fn::GetAtt: [ LambdaFunctionTrigger, Arn ]
      StartingPosition: LATEST

Outputs:
  DynamoDBTableName:
    Value: !Ref DynamoDBTableTTL
    Description: 'Nome da tabela DynamoDB criada'
  PolicyRoleName: 
    Value: !Ref MyFunctionRole
    Description: 'Nome da IAM Role criada'
  LambdaFunctionName:
    Value: !Ref LambdaFunctionTrigger
    Description: 'Nome da Lambda Function Criada'


          
